// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.2
// source: parcels.proto

package parcels

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ParcelsClient is the client API for Parcels service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParcelsClient interface {
	GetParcels(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Parcels_GetParcelsClient, error)
	SaveOrUpdateParcel(ctx context.Context, in *ParcelMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type parcelsClient struct {
	cc grpc.ClientConnInterface
}

func NewParcelsClient(cc grpc.ClientConnInterface) ParcelsClient {
	return &parcelsClient{cc}
}

func (c *parcelsClient) GetParcels(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Parcels_GetParcelsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Parcels_ServiceDesc.Streams[0], "/grpc.parcels.Parcels/GetParcels", opts...)
	if err != nil {
		return nil, err
	}
	x := &parcelsGetParcelsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Parcels_GetParcelsClient interface {
	Recv() (*ParcelMessage, error)
	grpc.ClientStream
}

type parcelsGetParcelsClient struct {
	grpc.ClientStream
}

func (x *parcelsGetParcelsClient) Recv() (*ParcelMessage, error) {
	m := new(ParcelMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *parcelsClient) SaveOrUpdateParcel(ctx context.Context, in *ParcelMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/grpc.parcels.Parcels/SaveOrUpdateParcel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParcelsServer is the server API for Parcels service.
// All implementations must embed UnimplementedParcelsServer
// for forward compatibility
type ParcelsServer interface {
	GetParcels(*emptypb.Empty, Parcels_GetParcelsServer) error
	SaveOrUpdateParcel(context.Context, *ParcelMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedParcelsServer()
}

// UnimplementedParcelsServer must be embedded to have forward compatible implementations.
type UnimplementedParcelsServer struct {
}

func (UnimplementedParcelsServer) GetParcels(*emptypb.Empty, Parcels_GetParcelsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetParcels not implemented")
}
func (UnimplementedParcelsServer) SaveOrUpdateParcel(context.Context, *ParcelMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveOrUpdateParcel not implemented")
}
func (UnimplementedParcelsServer) mustEmbedUnimplementedParcelsServer() {}

// UnsafeParcelsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParcelsServer will
// result in compilation errors.
type UnsafeParcelsServer interface {
	mustEmbedUnimplementedParcelsServer()
}

func RegisterParcelsServer(s grpc.ServiceRegistrar, srv ParcelsServer) {
	s.RegisterService(&Parcels_ServiceDesc, srv)
}

func _Parcels_GetParcels_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ParcelsServer).GetParcels(m, &parcelsGetParcelsServer{stream})
}

type Parcels_GetParcelsServer interface {
	Send(*ParcelMessage) error
	grpc.ServerStream
}

type parcelsGetParcelsServer struct {
	grpc.ServerStream
}

func (x *parcelsGetParcelsServer) Send(m *ParcelMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Parcels_SaveOrUpdateParcel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParcelMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParcelsServer).SaveOrUpdateParcel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.parcels.Parcels/SaveOrUpdateParcel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParcelsServer).SaveOrUpdateParcel(ctx, req.(*ParcelMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Parcels_ServiceDesc is the grpc.ServiceDesc for Parcels service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Parcels_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.parcels.Parcels",
	HandlerType: (*ParcelsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveOrUpdateParcel",
			Handler:    _Parcels_SaveOrUpdateParcel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetParcels",
			Handler:       _Parcels_GetParcels_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "parcels.proto",
}
